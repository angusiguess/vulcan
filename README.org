* Vulcan

Tool to simplify workflow with Git-based Clojure dependencies using clojure.tools.deps

- upgrade Git deps based on organization or prefix
- upgrade to latest SHA corresponding to release tags
- flatten dependencies
- diff upstream versions of Git deps
- link to local projects
- generate the next semantic version tag
- pack dependencies to run without uberjar
- find dependencies that have conflicting namespaces
- run test selectors with proper exit code
- import new deps in the REPL

* Install

Add below alias to ~/.clojure/deps.edn

#+BEGIN_SRC clojure
{:aliases
 {:vulcan
  {:extra-deps
   {omnyway-labs/vulcan
    {:git/url "https://github.com/omnyway-labs/vulcan.git",
     :sha "7e0956d35688dbd3c5e0a72863f8d57e3796bda8"
     :tag "master"}},
   :main-opts ["-m" "vulcan.main"],
   :jvm-opts
   ["-client"
    "-XX:+UseSerialGC"
    "-XX:CICompilerCount=1"
    "-XX:+TieredCompilation"
    "-Xshare:off"
    "-Xverify:none"
    "-XX:TieredStopAtLevel=1"]}}}
#+END_SRC

* Usage

#+begin_src sh
clj -Avulcan command args
Available commands:
  upgrade    Upgrade deps to latest tags for given org or prefix
  diff       Show diff of current and upstream tags for repos with given prefix
  flatten    Flatten out all dependencies recursively
  link       link local git repos
  unlink     unlink local git repos
  pack       Packs Git and Jar dependencies
  classpath  Print the Pack classpath
  conflicts  Find overlapping or conflicting namespaces for given org or prefix
  next-tag   Generate the next semantic version tag
  self-update Update vulcan-tools to latest master SHA
  test       Run test-runner with given selector
#+end_src

** Upgrading Dependencies

To upgrade git dependencies to their latest tags, do
#+begin_src sh
clj -Avulcan upgrade -p <github-org>
e.g clj -Avulcan upgrade -p omnyway-labs

# where prefix is the Organization prefix

# for a dry run
clj -Avulcan upgrade -p <github-org> --dry-run
#+end_src

** Flattening dependencies

To upgrade git dependencies to their latest tags and flatten
out their dependencies, do
#+begin_src sh
clj -Avulcan upgrade -p <github-org> --flatten
# or short form
clj -Avulcan upgrade -p <github-org> -f
#+end_src

** Diffing upstream versions

To find the latest and current versions (tags) for given org
#+begin_src sh
clj -Avulcan diff -p <github-org>
# output should be something like this
{foo/bar
 {"0.1.6" "2018-03-05T03:46:54.000+0000",
  "0.1.7" "2018-03-07T01:50:08.000+0000"},
#+end_src
** Linking to local projects

Sometimes, it is useful to "link" local projects that have local
changes - similar to *lein checkout*. To get the similar behavior do

#+begin_src sh
clj -Avulcan link --project <project>
# or
clj -Avulcan link -p <project>
#+end_src

Unlinking is easier too. Make sure you unlink before comitting
deps.edn to git

#+begin_src sh
clj -Avulcan unlink -p <project>
#+end_src

** Packing Dependencies

To pack all maven and git dependencies into a single directory, do
#+begin_src  sh
clj -Avulcan pack
#+end_src
This packs all deps to ./lib/{git,jar}. We could tar, containerize and deploy it.
That is what CI does. Also *pack* generates a .classpath file that
contains the resolved classpath string that can be used when invoking
the service
#+begin_src sh
java -cp src:`cat .classpath` clojure.main -m my.main $@
#+end_src

** Finding Conflict

To find overlapping or conflicting namespaces for given org (or prefix)

#+begin_src sh
clj -Avulcan conflicts -p github-org

The following projects duplicate the namespace foo.bar
foo-dep foo.bar
bar-dep foo.bar
#+end_src

** Generate next-tag

#+BEGIN_SRC sh
clj -Avulcan  next-tag
0.1.0
#+END_SRC
For this to work, need to create a RELEASE-0.1.0 tag initially
** Test selectors

#+BEGIN_SRC sh
clj -Avulcan test -s unit
clj -Avulcan test -s integration
#+END_SRC
This is useful to run tests with proper exit codes
** Importing libraries in the REPL
#+BEGIN_SRC clojure
(require '[vulcan.deps :as deps])
;; to import known libs in current deps.edn
(deps/import! :my-git-lib :latest)
(deps/import! :my-git-lib "0.1.40")
;; to try a new library not in deps.edn
(deps/import! '(hiccup {:mvn/version "0.1.0"})
(deps/import! '{org/project
                 {:git/url "git@github.com:org/project.git",
                  :tag "0.1.98"}})
#+END_SRC

* License - Apache 2.0

Copyright 2019 Omnyway Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

[[http://www.apache.org/licenses/LICENSE-2.0]]

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License
